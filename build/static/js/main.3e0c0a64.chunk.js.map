{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","className","type","aria-label","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","height","width","GifGrid","setImages","useEffect","then","imgs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACjBC,mBAAS,IADQ,mBAC9CC,EAD8C,KAClCC,EADkC,KAerD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA+BO,OAC7CN,EAAc,MAKcO,UAAU,OAAxC,SACE,uBACEC,KAAK,OACLC,aAAW,aACXF,UAAU,uGACVG,MAAOX,EACPY,SAnBoB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,Y,mCCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,0BAAST,UAAU,6CAAnB,UACE,kCACE,qBACEuB,IAAKd,EACLe,IAAKL,EACLA,MAAOA,EACPM,OAAO,MACPC,MAAM,MACN1B,UAAU,iCAGd,mBAAGA,UAAU,qDAAb,SACE,sBAAMA,UAAU,WAAhB,SAA4BmB,UCMrBQ,EAlBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,EACJhB,mBAAS,IADL,mBACzB6B,EADyB,KACjBQ,EADiB,KAOhC,OAJAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GAAD,OAAUH,EAAUG,QAC1C,CAACxB,IAGF,qCACE,oBAAIP,UAAU,uBAAd,SAAsCO,IACtC,qBAAKP,UAAU,uBAAf,SACGoB,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCMjBc,MAlBf,WAAyB,IAAD,EACczC,mBAAS,CAAC,cADxB,mBACfQ,EADe,KACHT,EADG,KAGtB,OACE,sBAAKU,UAAU,SAAf,UACE,qBAAIA,UAAU,qDAAd,sBACW,0CAEX,oBAAIA,UAAU,uBACd,cAACX,EAAD,CAAaC,cAAeA,IAEzBS,EAAWiB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAASA,SAAUA,GAAeA,U,MCV5C0B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.3e0c0a64.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function AddCategory({ setCategories }) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 1) {\r\n      setCategories((categories) => [inputValue,...categories ]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"w-96\">\r\n      <input\r\n        type=\"text\"\r\n        aria-label=\"Buscar gif\"\r\n        className=\"border w-full my-1 max-w-full  ring outline-none  ring-gray-300 focus:ring focus:ring-purple-500 p-2\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=fzId3VBuREjibqafqpDWOufrEfE0rw3r`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs\r\n  };","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <article className=\"card flex-col flex-grow relative max-w-max\">\r\n      <picture>\r\n        <img\r\n          src={url}\r\n          alt={title}\r\n          title={title}\r\n          height=\"200\"\r\n          width=\"300\"\r\n          className=\"object-cover h-full w-full\"\r\n        />\r\n      </picture>\r\n      <p className=\"flex  absolute bottom-0 text-white left-0 p-3 h-36\">\r\n        <span className=\"self-end\">{title}</span>\r\n      </p>\r\n    </article>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const [images, setImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => setImages(imgs));\r\n  }, [category]);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"font-medium text-3xl\">{category}</h3>\r\n      <div className=\"flex flex-wrap gap-2\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default GifGrid;\r\n","import { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory.js\";\r\nimport GifGrid from \"./components/GifGrid.js\";\r\n\r\nfunction GifExpertApp() {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <h1 className=\"title font-bold text-5xl font-sans leading-relaxed\">\r\n        GifExpert<span>App</span>\r\n      </h1>\r\n      <hr className=\"my-2  border-black\" />\r\n      <AddCategory setCategories={setCategories} />\r\n       \r\n        {categories.map((category) => (\r\n          <GifGrid category={category} key={category} />\r\n        ))} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css'; \n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp/>,\n  //  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log)\n"],"sourceRoot":""}